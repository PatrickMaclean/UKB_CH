version 1.0

workflow CHIP_processing {
    input {
        File cram_file
        File cram_file_index
        File CHIP_regions
        File ref_genome
        File ref_genome_index
        File ref_genome_dict
        File ref_genome_gzi
        File gnomad
        File gnomad_index
        File pon
        File pon_index
        String ID = basename(cram_file, ".cram")
    }

    call cram_extract_index { 
        input: ID = ID, cram_file = cram_file, cram_file_index = cram_file_index, CHIP_regions = CHIP_regions, ref_genome = ref_genome, ref_genome_index = ref_genome_index, ref_genome_dict = ref_genome_dict, ref_genome_gzi = ref_genome_gzi
    }

    call mutect2 {
        input: ID = ID, pon = pon, pon = pon_index, gnomad = gnomad, gnomad_index = gnomad_index, extracted_regions = cram_extract_index.extracted_regions, extracted_regions_index = cram_extract_index.extracted_regions_index, CHIP_regions = CHIP_regions, ref_genome = ref_genome, ref_genome_index = ref_genome_index, ref_genome_dict = ref_genome_dict, ref_genome_gzi = ref_genome_gzi
    }

    call LearnReadOrientationModel {
        input: ID = ID, F1R2_counts = mutect2.F1R2_counts
    }

    call GetPileUpSummaries {
        input: ID = ID, CHIP_regions=CHIP_regions, gnomad = gnomad, gnomad_index = gnomad_index, extracted_regions = cram_extract_index.extracted_regions, extracted_regions_index = cram_extract_index.extracted_regions_index, ref_genome = ref_genome, ref_genome_index = ref_genome_index, ref_genome_dict = ref_genome_dict, ref_genome_gzi = ref_genome_gzi
    }

    call CalculateContamination {
        input: ID = ID, pileupsummariestable = GetPileUpSummaries.pileupsummariestable
    }

    call FilterMutectCalls {
        input: ID = ID, read_orientation_model = LearnReadOrientationModel.read_orientation_model, tumoursegmentstable = CalculateContamination.tumoursegmentstable, contaminationtable = CalculateContamination.contaminationtable, mutect_unfiltered_vcf = mutect2.mutect_unfiltered_vcf, ref_genome = ref_genome
    }

    output {
        File extracted_regions = cram_extract_index.extracted_regions
        File extracted_regions_index = cram_extract_index.extracted_regions_index
        File filtered_vcf = FilterMutectCalls.filtered_vcf
    }
}

task cram_extract_index {
    input {
        File cram_file
        File cram_file_index
        File CHIP_regions
        File ref_genome
        File ref_genome_index
        File ref_genome_dict
        File ref_genome_gzi
        String ID
    }
    command <<<
        set -x -e -o pipefail
        time samtools view --reference ~{ref_genome} -L ~{CHIP_regions} -C -o ~{ID}_extracted_regions.cram ~{cram_file} 
        time samtools index ~{ID}_extracted_regions.cram
    >>>
    runtime {
        docker: "dx://UKB_CHIP:/docker/gatk.tar.gz"
        dx_instance_type: "mem1_ssd1_v2_x8"
    }
    output {
        File extracted_regions = "~{ID}_extracted_regions.cram"
        File extracted_regions_index = "~{ID}_extracted_regions.cram.crai"
    }
}

task mutect2 {  
    input {
        File extracted_regions
        File extracted_regions_index 
        File CHIP_regions
        File ref_genome
        File ref_genome_index
        File ref_genome_dict
        File ref_genome_gzi
        File pon
        File gnomad
        File gnomad_index
        String ID
    }
    command <<<
        set -x -e -o pipefail
        gatk Mutect2 \
            -R ~{ref_genome} \
            -I ~{extracted_regions} \
            --germline-resource ~{gnomad} \
            -pon ~{pon} \
            -L ~{CHIP_regions} \
            -O ~{ID}_unfiltered_vcf \
            --f1r2-tar-gz ~{ID}_F1R2_counts.tar.gz
    >>>
    runtime {
        docker: "dx://UKB_CHIP:/docker/gatk.tar.gz"
        dx_instance_type: "mem1_ssd1_v2_x8"
    }
    output {
        File mutect_unfiltered_vcf = "~{ID}_unfiltered_vcf"
        File F1R2_counts = "~{ID}_F1R2_counts.tar.gz"
    }
}

task LearnReadOrientationModel {
    input {
        File F1R2_counts
        String ID
    }
    command <<<
        set -x -e -o pipefail
        gatk LearnReadOrientationModel \
        -I ~{F1R2_counts} \
        -O ~{ID}_read_orientation_model.tar.gz
    >>>
    runtime {
        docker: "dx://UKB_CHIP:/docker/gatk.tar.gz"
        dx_instance_type: "mem1_ssd1_v2_x8"
    }
    output {
        File read_orientation_model = "~{ID}_read_orientation_model.tar.gz"
    }
}


task GetPileUpSummaries {
    input {
        File extracted_regions
        File extracted_regions_index 
        File ref_genome
        File ref_genome_index
        File ref_genome_dict
        File ref_genome_gzi
        File CHIP_regions
        File gnomad
        File gnomad_index
        String ID
    }
    command <<<
        set -x -e -o pipefail
        gatk GetPileupSummaries \
        -L ~{CHIP_regions} \
        --interval-padding 200 \
        -I ~{extracted_regions} \
        -R ~{ref_genome} \
        -V ~{gnomad} \
        -O ~{ID}_pileupsummaries.table

    >>>
    runtime {
        docker: "dx://UKB_CHIP:/docker/gatk.tar.gz"
        dx_instance_type: "mem1_ssd1_v2_x8"
    }
    output {
        File pileupsummariestable = "~{ID}_pileupsummaries.table"
    }
}


task CalculateContamination {
    input {
        File pileupsummariestable
        String ID
    }
    command <<<
        set -x -e -o pipefail
        gatk CalculateContamination \
        -I ~{pileupsummariestable} \
        -tumor-segmentation ~{ID}_tumoursegments.table \
        -O ~{ID}_calculatecontamination.table
    >>>
    runtime {
        docker: "dx://UKB_CHIP:/docker/gatk.tar.gz"
        dx_instance_type: "mem1_ssd1_v2_x8"
    }
    output {
        File tumoursegmentstable = "~{ID}_tumoursegments.table"
        File contaminationtable = "~{ID}_calculatecontamination.table"
    }
}

task FilterMutectCalls {    
    input {
        File tumoursegmentstable
        File contaminationtable
        File read_orientation_model
        File mutect_unfiltered_vcf
        File ref_genome
        String ID
    }
    command <<<
        set -x -e -o pipefail
        gatk FilterMutectCalls \
        -V ~{mutect_unfiltered_vcf} \
        -R ~{ref_genome} \
        --tumor-segmentation ~{tumoursegmentstable} \
        --contamination-table ~{contaminationtable} \
        --ob-priors ~{read_orientation_model} \
        -O ~{ID}_filtered.vcf
    >>>
    runtime {
        docker: "dx://UKB_CHIP:/docker/gatk.tar.gz"
        dx_instance_type: "mem1_ssd1_v2_x8"
    }
    output {
        File filtered_vcf = "~{ID}_filtered.vcf"
    }
}
